<?xml version="1.0" encoding="UTF-8"?>
<project name="MultiBit HD Installer" default="release-all" basedir=".">

  <description>Build the MultiBit HD native installers</description>

  <!-- What the user will see -->
  <property name="app.name" value="MultiBit HD"/>

  <!-- The JWrapper version to use -->
  <property name="jwrapper.version" value="00029103852"/>
  <property name="jwrapper.sha256" value=""/>
  <property name="jwrapper.location" value="jwrapper-${jwrapper.version}.jar"/>

  <!-- Where to find official updates -->
  <property name="jars.location" value="https://multibit.org/"/>

  <!-- All JARs have this prefix (build_version is provided through Maven) -->
  <property name="jars.prefix" value="mbhd-${build_version}"/>

  <!-- Provide the names for the application JARs to be wrapped -->
  <property name="jars.win32" value="${jars.prefix}-win.jar"/>
  <property name="jars.win64" value="${jars.prefix}-win-64.jar"/>
  <property name="jars.macosx" value="${jars.prefix}-osx.jar"/>
  <property name="jars.linux32" value="${jars.prefix}-linux.jar"/>
  <property name="jars.linux64" value="${jars.prefix}-linux-64.jar"/>

  <!-- Detect if JWrapper main JAR exists (if not we should download it) -->
  <target name="jwrapper-exists">

    <available file="${jwrapper.location}" property="jwrapper.exists"/>

  </target>

  <!-- Download the required copy of JWrapper -->
  <target name="get-jwrapper" depends="jwrapper-exists" unless="jwrapper.exists">

    <echo message="Downloading '${jwrapper.location}' (this may take some time > 15Mb)" />

    <!-- GET the required version of JWrapper -->
    <get src="https://simple-help.com/media/static/jwrapper/jwrapper-${jwrapper.version}.jar" dest="${jwrapper.location}" verbose="true"/>

    <!-- Extract the JAR contents -->
    <java jar="${jwrapper.location}" failonerror="true" fork="true">
      <jvmarg value="-Xmx512m"/>
      <arg value="extractonly"/>
    </java>

  </target>

  <!-- Compile the code that depends on JWrapper utilities -->
  <target name="compile-launcher" depends="jwrapper-exists" if="jwrapper.exists">

    <echo message="Compiling launcher code" />

    <path id="classpath">
      <!-- Add the JWrapper utilities -->
      <fileset dir="${basedir}/lib">
        <include name="jwrapper_utils.jar"/>
      </fileset>

      <!-- Maven provides the rest of the classpath -->
      <pathelement path="${compile_classpath}"/>
    </path>

    <!-- Compile the JWrapper specific code -->
    <javac destdir="${basedir}/target/classes">
      <src path="${basedir}/src/main/jwrapper"/>
      <classpath refid="classpath"/>
    </javac>

  </target>

  <!-- Default target to build all native installers in one go
       Checks that JWrapper exists to reduce chance of error -->
  <target name="release-all" depends="jwrapper-exists" if="jwrapper.exists">

    <echo message="Use trademark logo if present" />
    <copy file="target/classes/trademark-logo.png" tofile="target/classes/logo.png" failonerror="false" force="true" />

    <echo message="Building native installers (this may take 20 mins on first run)" />

    <!-- Begin the install process -->
    <java jar="${jwrapper.location}" failonerror="true" fork="true">
      <jvmarg value="-Xmx512m"/>
      <arg value="src/main/resources/jwrapper-all.xml"/>
    </java>

    <!-- Windows -->
    <move file="build/${app.name}-windows32-offline.exe" tofile="target/${jars.prefix}-win32.exe"/>
    <move file="build/${app.name}-windows64-offline.exe" tofile="target/${jars.prefix}-win64.exe"/>

    <!-- Mac -->
    <move file="build/${app.name}-macos64-offline.dmg" tofile="target/${jars.prefix}-macosx.dmg"/>

    <!-- Linux -->
    <untar src="build/${app.name}-linux32-offline.tar" dest="build/"/>
    <move file="build/${app.name}-linux32-offline" tofile="target/${jars.prefix}-linux"/>
    <chmod file="target/${jars.prefix}-linux" perm="755"/>

    <untar src="build/${app.name}-linux64-offline.tar" dest="build/"/>
    <move file="build/${app.name}-linux64-offline" tofile="target/${jars.prefix}-linux64"/>
    <chmod file="target/${jars.prefix}-linux64" perm="755"/>

  </target>

</project>